# NOTE: update this with your service name
service: notes-app-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  #environment: ${file(env.yml):${self:provider.stage}}

# 'iamRoleStatements' defines the permission policy for the Lambda function.
# In this case Lambda functions are granted with permissions to access DynamoDB.
iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:DescribeTable
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
    Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /appointment
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-appointment:
    handler: create-appointment.main
    events:
      - http:
          path: appointment
          method: post
          cors: true
          authorizer: aws_iam
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /opportunity
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-opportunity:
  handler: create-opportunity.main
  events:
    - http:
        path: opportunity
        method: post
        cors: true
        authorizer: aws_iam
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /user
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create-user:
  handler: create-user.main
  events:
    - http:
        path: user
        method: post
        cors: true
        authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  
  list-appointments:
    # Defines an HTTP API endpoint that calls the main function in list-appointment.js
    # - path: url path is /appointment
    # - method: GET request
    handler: list-appointments.main
    events:
      - http:
          path: appointment
          method: get
          cors: true
          authorizer: aws_iam
  list-opportunities:
    # Defines an HTTP API endpoint that calls the main function in list-opportunities.js
    # - path: url path is /opportunity
    # - method: GET request
    handler: list-opportunities.main
    events:
      - http:
          path: opportunity
          method: get
          cors: true
          authorizer: aws_iam
  list-users:
    # Defines an HTTP API endpoint that calls the main function in list-users.js
    # - path: url path is /user
    # - method: GET request
    handler: list-users.main
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
        